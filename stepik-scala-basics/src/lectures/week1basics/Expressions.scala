package lectures.week1basics

object Expressions extends App {

  val aVal = 1 + 2 * 3
  println(aVal)
  print(1 + 2 * 3)
  println()
//if-Выражение
//Все в Scala является выражением - это очень важно понять и запомнить. И if не является исключением.
//
//Разберем пример

  val aCondition = true

  val ifExpressionValue = if (aCondition) "True Condition" else "False Condition"
  println(ifExpressionValue) // выведет True Condition
//  Пример показывает, что в Scala, в отличие от других языков программирования, мы не кодим в стиле
//
//  if (условие):
//  присвой значение (пишем для этого инструкцию)
//  else:
//  присвой переменной другое значение (пишем еще одну инструкцию)
//
//  а сразу пишем значение, которое хотим присвоить в первом и во втором случае.
//
//
//
//    Кто до сих пор не верит, что if - это выражение, смотрите:
  val aCondition_ = true
  println(if(aCondition_) "True Condition" else "False Condition") // выведет True Condition
//  Т.е. мы можем вообще прописать if-выражение в print и компилятор без возражений напечатает нам результат.
//
//  Как видите, выполняются оба свойства выражений: возвращается значение (True Condition) с типом (String).



//  Тип Unit
//  Вы же запомнили, что все в Scala является выражением? Ожидается, что выражение возвращает значение. Но бывают случаи, когда никакого значения не возвращается. За примером далеко ходить не надо - тот же print.


//    Значения нет, а возможность написать, например, вот такой код

  val someVal = println("I just want to print")
  //  должна быть. И для этого всего-то надо иметь тип, указывающий, что никакого значения нет. С чем замечательно справляется Unit.
  println(someVal.getClass)
  //    Т.е. код можно переписать так:
  val someVal2: Unit = println("I just want to print")
//  Unit особенно полезен в функциях, когда нам ничего, кроме как вывести что-то на экран, не требуется.
//  Если проводить параллели с другими языками программирования - Unit можно ассоциировать с Void.


  //  Блок кода (Code block)
  //  Блок кода - это все те строки кода, что мы пишем в фигурных скобках.

  val aCodeBlock = {
    val someVal = 1
    val y = 2

    if (someVal + y > 1) true else false
  }

  println(aCodeBlock) // выводит true


  //  Блок кода также является выражением, результат(и тип) которого равен результату(и типу) последнего описанного внутри блока кода выражения.
  //
  //
  //
  //    Если, например, допишем строку "String to return" в конец нашего предыдущего блока кода, то aCodeBlock сменит тип на String, что соответствует типу последнего выражения "String to return", описанного в блоке

  val aCodeBlock2 = {
    val someVal = 1
    val y = 2

    if (someVal + y > 1) true else false

    "String to return"
  }


  println(aCodeBlock2) // выводит "String to return"
  //  В целом, как видите, неплохой способ обойтись без return.
  //
  //
  //  И помните: все, что случилось внутри блока кода, остается внутри блока кода.
  //  Т.е. если внутри блока мы определили переменную, которую затем захотели использовать вне этого блока - у нас ничего не выйдет:


}
